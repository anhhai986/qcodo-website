#!/usr/local/bin/php
<?php
	require(dirname(__FILE__) . '/cli_prepend.inc.php');

	// Example optional IssueFieldOption values for optional IssueFields loaded from data.sql
	$strOperatingSystemArray = array('CentOS 4', 'CentOS 5', 'CentOS 5.1', 'CentOS 5.2', 'CentOS 5.3',
		'Mac OS X 10.4', 'Mac OS X 10.5', 'Mac OS X 10.6',
		'RHEL 4', 'RHEL 5', 'RHEL 5.1', 'RHEL 5.2', 'RHEL 5.3',
		'Windows 2000', 'Windows XP / 2003', ' Windows Vista', 'Windows 7',
		'Ubuntu 7.04', 'Ubuntu 7.10', 'Ubuntu 8.04', 'Ubuntu 8.10', 'Ubuntu 9.04', 'Ubuntu 9.10'); 
	$strBrowserArray = array('Chrome 1', 'Chrome 2', 'Chrome 3',
		'Firefox 2', 'Firefox 3', 'Firefox 3.5',
		'Microsoft IE 6', 'Microsoft IE 7', 'Microsoft IE 8',
		'Safari 2', 'Safari 3', 'Safari 4'
	);
	$strServerArray = array('Apache 1.x', 'Apache 2.x', 'IIS 4', 'IIS 5', 'IIS 5.1', 'IIS 6', 'IIS 7', 'IIS 7.5');
	$strDatabaseArray = array('MySQL 4.x', 'MySQL 5.0', 'MySQL 5.1', 'MySQL 6.0', 'PostgreSQL 8.x', 'SQL Server 2000', 'SQL Server 2005', 'SQL Server 2008', 'SQLite 3.x');

	$intMaxCountryId = Country::CountAll();
	$intMaxTimeZoneId = Timezone::CountAll();
	$intMinForumId = Forum::QuerySingle(QQ::All(), QQ::OrderBy(QQN::Forum()->Id))->Id;
	$intMaxForumId = Forum::QuerySingle(QQ::All(), QQ::OrderBy(QQN::Forum()->Id, false))->Id;

	$dttStartDate = new QDateTime('2005-01-01 00:00:00');

	function GenerateOptionsForField($strFieldName, $strOptionNameArray) {
		$objIssueField = IssueField::QuerySingle(QQ::Equal(QQN::IssueField()->Name, $strFieldName));
		$intOrderNumber = 0;
		foreach ($strOptionNameArray as $strOptionName) {
			$intOrderNumber++;
			$objOption = new IssueFieldOption();
			$objOption->IssueField = $objIssueField;
			$objOption->Name = $strOptionName;
			$objOption->SetToken();
			$objOption->OrderNumber = $intOrderNumber;
			$objOption->ActiveFlag = true;
			$objOption->Save();
		}
	}



	//////////////////////
	// People
	//////////////////////

	while (QDataGen::DisplayWhileTask('Generating Person records', 200)) {
		$objPerson = new Person();
		
		// Person Type Id
		$objPerson->PersonTypeId = QDataGen::GenerateFromArrayWithProbabilities(array(
			array(PersonType::Contributor, 5),
			array(PersonType::RegisteredUser, 95)
		));

		// Required Stuff
		$objPerson->FirstName = QDataGen::GenerateFirstName();
		$objPerson->LastName = QDataGen::GenerateLastName();
		$objPerson->Username = QDataGen::GenerateUsername($objPerson->FirstName, $objPerson->LastName);
		$objPerson->Email = QDataGen::GenerateEmail($objPerson->FirstName, $objPerson->LastName);
		$objPerson->SetPassword('password');

		// Flags
		$objPerson->DisplayRealNameFlag = !rand(0, 3);
		$objPerson->DisplayEmailFlag = !rand(0, 7);
		$objPerson->OptInFlag = !rand(0, 3);
		$objPerson->DonatedFlag = !rand(0, 80);

		// Location and Country Flag
		if (rand(0, 2)) {
			$objPerson->Location = QDataGen::GenerateCity();
			if (rand(0, 2)) {
				$objPerson->CountryId = rand(1, $intMaxCountryId);
				$objPerson->Location .= ', ' . $objPerson->Country->Name;
			}
		}

		// Other Stuff
		if (!rand(0, 5)) $objPerson->Url = QDataGen::GenerateWebsiteUrl();
		if (!rand(0, 2)) $objPerson->TimezoneId = rand(1, $intMaxTimeZoneId);
		$objPerson->RegistrationDate = QDataGen::GenerateDateTime($dttStartDate, QDateTime::Now());

		// Save
		$objPerson->Save();
		$intMaxPersonId = $objPerson->Id;
	}



	//////////////////////
	// Issue Tracker
	//////////////////////

	print 'Generating Issue Field Options...';
	GenerateOptionsForField('Browser', $strBrowserArray);
	GenerateOptionsForField('Web Server', $strServerArray);
	GenerateOptionsForField('Database', $strDatabaseArray);
	GenerateOptionsForField('Operating System', $strOperatingSystemArray);
	print " Done.\r\n";

	// Cache Field and Option Values
	$objIssueFieldArray = IssueField::LoadAll();
	$objIssueFieldOptionArray = array();
	foreach ($objIssueFieldArray as $objIssueField) {
		$objIssueFieldOptionArray[$objIssueField->Id] = array();
		foreach ($objIssueField->GetIssueFieldOptionArray() as $objIssueFieldOption) {
			$objIssueFieldOptionArray[$objIssueField->Id][] = $objIssueFieldOption;
		}
	}

	// Generate Issues, themselves
	while (QDataGen::DisplayWhileTask('Generating Issues', 500)) {
		$objIssue = new Issue();
		$objIssue->IssueStatusTypeId = rand(1, IssueStatusType::MaxId);
		$objIssue->Title = QDataGen::GenerateTitle(2, 6);
		$objIssue->ExampleCode = QDataGen::GenerateContent(rand(1, 3), 10, 30);
		if (!rand(0, 2)) $objIssue->ExampleTemplate = QDataGen::GenerateContent(rand(1, 3), 10, 30);
		if (!rand(0, 2)) $objIssue->ExampleData = QDataGen::GenerateContent(rand(1, 3), 10, 30);
		if (!rand(0, 2)) $objIssue->ExpectedOutput = QDataGen::GenerateContent(rand(1, 3), 10, 30);
		if (!rand(0, 2)) $objIssue->ActualOutput = QDataGen::GenerateContent(rand(1, 3), 10, 30);
		$objIssue->PostedByPersonId = rand(1, $intMaxPersonId);
		$objIssue->PostDate = QDataGen::GenerateDateTime($dttStartDate, QDateTime::Now());
		
		if (($objIssue->IssueStatusTypeId == IssueStatusType::Assigned) ||
			($objIssue->IssueStatusTypeId == IssueStatusType::Fixed) ||
			($objIssue->IssueStatusTypeId == IssueStatusType::ClosedFixed)) {
			$objIssue->AssignedToPersonId = rand(1, $intMaxPersonId);
			$objIssue->AssignedDate = QDataGen::GenerateDateTime($objIssue->PostDate, QDateTime::Now());

			if ($objIssue->IssueStatusTypeId == IssueStatusType::Assigned) {
				if (rand(0, 1))
					$objIssue->DueDate = QDataGen::GenerateDateTime($objIssue->PostDate, QDateTime::Now());
			}
		}
		$objIssue->LastUpdateDate = $objIssue->PostDate;
		$objIssue->Save();

		// Add Field Values
		foreach ($objIssueFieldArray as $objIssueField) {
			if ($objIssueField->RequiredFlag || rand(0, 1)) {
				$objIssue->SetFieldOption(QDataGen::GenerateFromArray($objIssueFieldOptionArray[$objIssueField->Id]));
			}
		}

		// Add Votes
		$intCount = rand(0, 25);
		if (rand(0, 1)) $intCount = round($intCount / 2);
		if (rand(0, 1)) $intCount = round($intCount / 2);
		for ($intIndex = 0; $intIndex < $intCount; $intIndex++) {
			$objIssue->SetVote(Person::Load(rand(1, $intMaxPersonId)));
		}

		// Add Trackers
		$objIssue->AssociatePersonAsEmail($objIssue->PostedByPerson);
		$intCount = rand(0, 25);
		if (rand(0, 1)) $intCount = round($intCount / 2);
		if (rand(0, 1)) $intCount = round($intCount / 2);
		for ($intIndex = 0; $intIndex < $intCount; $intIndex++) {
			$objRandomPerson = Person::Load(rand(1, $intMaxPersonId));
			if (!$objIssue->IsPersonAsEmailAssociated($objRandomPerson))
				$objIssue->AssociatePersonAsEmail($objRandomPerson);
		}
	}

	// Generate Issues, themselves
	QDataGen::DisplayForEachTaskStart($strTitle = 'Generating Messages for Issues', Issue::CountAll());
	foreach (Issue::LoadAll() as $objIssue) {
		$intStep = QDataGen::DisplayForEachTaskNext($strTitle);
		$intCount = rand(1, 25);
		if (rand(0, 1)) $intCount = round($intCount / 2);
		if (rand(0, 1)) $intCount = round($intCount / 2);
		if (rand(0, 1)) $intCount = round($intCount / 2);
		$dttPostDate = $objIssue->PostDate;
		for ($intIndex = 0; $intIndex < $intCount; $intIndex++) {
			// If first message, the person who posted is the one who posts the first message
			$objPerson = ($intIndex == 0) ? $objIssue->PostedByPerson : Person::Load(rand(1, $intMaxPersonId));

			// Get a random Message PostDate relatively close to the current dttpostdate we're iterating through
			$dttEndRange = QDataGen::GenerateDateTime($dttPostDate, QDateTime::Now());
			$dttEndRange = QDataGen::GenerateDateTime($dttPostDate, $dttEndRange);
			$dttEndRange = QDataGen::GenerateDateTime($dttPostDate, $dttEndRange);
			$dttPostDate = ($intIndex == 0) ? new QDateTime($objIssue->PostDate) : QDataGen::GenerateDateTime($dttPostDate, $dttEndRange);

			$objIssue->PostMessage(QDataGen::GenerateContent(rand(1, 3), 10, 30), $objPerson, $dttPostDate);
		}
	}
	QDataGen::DisplayForEachTaskEnd($strTitle);
	exit(0);

	//////////////////////
	// Forum Topics
	//////////////////////

	while (QDataGen::DisplayWhileTask('Generating Forum Topics', 500)) {
		$objTopic = new Topic();
		$objTopic->ForumId = rand($intMinForumId, $intMaxForumId);
		$objTopic->Name = QDataGen::GenerateTitle(4, 12);
		$objTopic->PersonId = rand(1, $intMaxPersonId);
		$objTopic->LastPostDate = QDataGen::GenerateDateTime($dttStartDate, QDateTime::Now());
		$objTopic->ViewCount = rand(1000, 99999);
		$objTopic->Save();
	}



	//////////////////////
	// Forum Messages
	//////////////////////

	QDataGen::DisplayForEachTaskStart($strTopics = 'Generating Forum Messages for Topics', Topic::CountAll());
	foreach (Topic::LoadAll() as $objTopic) {
		$intStep = QDataGen::DisplayForEachTaskNext($strTopics);

		// Randomly Select a Number of Messages for this Forum Topic
		$intMessageCount = rand(1, 80);
		if (rand(0, 1)) $intMessageCount = round($intMessageCount / 2);
		if (rand(0, 1)) $intMessageCount = round($intMessageCount / 2);
		if (rand(0, 1)) $intMessageCount = round($intMessageCount / 2);
		if (rand(0, 1)) $intMessageCount = round($intMessageCount / 2);
		if (rand(0, 1)) $intMessageCount = round($intMessageCount / 2);
		if (rand(0, 1)) $intMessageCount = round($intMessageCount / 2);
		
		$blnFirstMessage = true;
		while (QDataGen::DisplayWhileTask(' - Generating Messages for Topic #' . $objTopic->Id, $intMessageCount, true)) {
			$objMessage = new Message();
			$objMessage->Forum = $objTopic->Forum;
			$objMessage->Topic = $objTopic;

			if ($blnFirstMessage) {
				$blnFirstMessage = false;
				// The "First Message" should be posted by the topic's post person and have the topic's post date
				$objMessage->Person = $objTopic->Person;
				$objMessage->PostDate = $objTopic->LastPostDate;
			} else {
				$objMessage->PersonId = rand(1, $intMaxPersonId);
				$objMessage->PostDate = QDataGen::GenerateDateTime($objTopic->LastPostDate, QDateTime::Now());
			}

			$objMessage->Message = QDataGen::GenerateContent(rand(1, 5));
			$objMessage->RefreshCompiledHtml();
			$objMessage->Save();
		}
		
		// Finally, Refresh this topic's last post date and message count so that it matches the truly post date of the most recently posted message
		$objTopic->RefreshStats();
	}
	QDataGen::DisplayForEachTaskEnd($strTopics);

	// Refresh each Forum's Last Post Date and Counts as well
	foreach (Forum::LoadAll() as $objForum) {
		$objForum->RefreshStats();
	}
?>